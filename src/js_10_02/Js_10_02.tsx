export let a = {
    name: 'It-kamasutra.com',
    protocol: 'https',
    maxStudentsCount: 10,
    isOnline: true,
    students: ['ivan', 'andrey', 'farid'],
    classroom: {
        teacher: {
            name: 'wew',
            age: 18
        }
    }
}
//Делаем поверхностную копию объекта a :
let b = {...a};
/*Вот из чего состоит наш объект копия b при воверхностном копировании:
let b = {
    name: 'It-kamasutra.com', // создалась копия, т.к.  это примитив (можем вносить изменения, т.к. это копия)
    protocol: 'https', // создалась копия, т.к.  это примитив (можем вносить изменения, т.к. это копия)
    maxStudentsCount: 10, // создалась копия, т.к.  это примитив (можем вносить изменения, т.к. это копия)
    isOnline: true, // создалась копия, т.к.  это примитив (можем вносить изменения, т.к. это копия)
    students: ['ivan', 'andrey', 'farid'], // создалась ССЫЛКА на этот же объект/массив ,а НЕ КОПИЯ ЭТОГО ОБЪЕКТА/МАССИВА. Просто ссылка!!! (НЕ можем вносить изменения, т.к. это НЕ копия)
    classroom: { // создалась ССЫЛКА на этот же объект classroom ,а НЕ КОПИЯ ЭТОГО ОБЪЕКТА. Просто ссылка!!! (НЕ можем вносить изменения, т.к. это НЕ копия)
        teacher: { // создалась ССЫЛКА на этот же объект,а НЕ КОПИЯ ЭТОГО ОБЪЕКТА. Просто ссылка!!! (НЕ можем вносить изменения, т.к. это НЕ копия)
            name: 'wew',
            age: 18
        }
    }}*/

//Делаем глубокую копию массива students
b.students = [...a.students]; // только сейчас создали КОПИЮ МАССИВА students. Теперь это копия массива, а не ссылка (можем вносить изменения, т.к. это копия)
//делаем глубокую копию объекта classroom
b.classroom = {...a.classroom}; // только сейчас создали КОПИЮ ОБЪЕКТА classroom. Теперь это копия объекта, а не ссылка (можем вносить изменения, т.к. это копия)
//делаем глубокую копию объекта teacher
b.classroom.teacher = {...a.classroom.teacher} // только сейчас создали КОПИЮ ОБЪЕКТА teatcher. Теперь это копия объекта, а не ссылка (можем вносить изменения, т.к. это копия)

//Полная запись глубокой копии всего объекта a:
let copyA = {
    ...a,
    students:[...a.students],
    classroom: {...a.classroom,
        teacher: {...a.classroom.teacher}
}}
//Запись в одну строку:
//let copyA = {...a, students:[...a.students], classroom: {...a.classroom, teacher: {...a.classroom.teacher}}}



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//копия объекта самый простой объект:
let d = {
    name: '232323',
    age: 12
}

// ЗАПИСЬ в две строчки:
let copyD = {...d}  // 1. Создали копию объекта d спред оператором ... (три точки)
copyD.name = 'xxxx' // 2. В объекте copyD мы поменяли значение у свойства name на 'xxxx', а в объекте d{} также осталось у свойтства name значение '232323'

// ЗАПИСЬ в одну строчку:     // создали копию // перезаписали свойство
let copyD1 = {...d, name:'xxxxx'}





//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//копия массива в котором лежат примитивы:
let a2 = [1,2,3,4,5,6]
let copyA2 = [0, ...a2, 7] // создали копию массива ч/з спред оператор '...' , добавили в него еще два элемента 0 и 7





//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// Копия массива, если в нем лежат не примитивы, а объекты/массивы:
let state = {
    name: 'it-kamasutra',
    age: 1,
    school: {
        address: 'Saint-Petersburg',
        }
    }
// 1. копия объекта state // 2. у объекта school хотим поменять значение address 3. поэтому делаем копию копия объекта school 4. перезаписали значение у свойства address
    let copyState = {...state, school: {...state.school, address: 'YYYYYYYYY'} }
console.log(copyState.school.address) // в копии объекта copyState{} получим 'YYYYYYYYY'
console.log(state.school.address) // в оригинальном объекте state{} так и останется 'Saint-Petersburg'





//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//Копия объекта, если у него есть глубокая вложенность в глубь в 2 объекта:   school{} и в нем еще один объект   director{}
// ЕСЛИ МЫ ХОТИМ ВНОСИТЬ ИЗМЕНЕНИЯ, ТО НАДО КАЖДЫЙ ОБЪЕКТ ИНДИВИДУАЛЬНО СКОПРИРОВАТЬ, СОЗДАТЬ КОПИЮ
let state2 = {
    name: 'it-kamasutra',
    age: 1,
    school: {
        address: 'Saint-Petersburg',
        director: {
            name: 'Andrey Victorovich'
        }
    }
}

//Запись в одну строку:
let copyState2 = {...state2, school: {...state2.school, director: {...state2.school.director, name: 'Oleg Andreevich'}}}
//Запись в четыре строки:
let copyState3 = {
    ...state2,
    school: {
        ...state2.school,
        director: {...state2.school.director, name: 'Oleg Andreevich'}
    }
}





//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//Если у нас лежит массив, и в массиве не примитивы, а н/р объекты то мы не сможем сделдать копию спред оператором.
//Нужно использовать map(). Поскольку мы не знаем в каком именно элементе в массиве нам необходимо что-то поменять
//Т.к. Массив это объект. Мы должны создать его копию, но и объекты внутри внего тоже нам нужно скопировать, ведь это просто ссылки будут, а нам нужны копии.
//Мы не можем сделать так копия массива [...a], и вносить изменения b[0].name = 'A'.
//Мы просто создадим новый объект массив и внем будут лежать ссылки на два других oбъекта.
//Следовательно мы внесем изменения в оригинальном объекте {name: 'Kirill', age: {}}, и у него изменим name: 'Kirill' на 'A'.
//Поэтому мы мапим наш массив c.map() и получим массив с точно таким же колличеством элементов
// let copyC = c.map( el => // Мы говорим, что из массив с мы хотим получить массив copyC, в котором столько же элементов
//       return {...el} // но мы берем и на базе каждого элемента el из массива с, создаем копию {...el} и эту копию помещяем в массив copyC
// });
// Только теперь он создал новый массив copyC, скопировал объекты и посадил их в этот новый массив
let c = [{name: 'Kirill'}, {name: 'Saha'}]
let copyC = c.map(el=> {
    return {
        ...el,
        age: {...el}
    }
})





//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//Если у нас лежит массив, и в массиве не примитивы, а н/р объекты, а в этом объекте еще один объект, еще одна вложенность
//То мы тоже не должны через запятую его скопировать
let c1 = [{name: 'Kirill', age: {}}, {name: 'Saha'}]
let copyC1 = c1.map(el=> {
    return {
        ...el, // создали копию этого объекта {name: 'Kirill', age: {}}, {name: 'Saha'}, снова видим, что age{} это объект, а значит СОЗДАЛАСЬ ССЫЛКА на него, А НЕ КОПИЯ!!! Поэтому для него нужно отдельно создать копию
        age: {...el.age} // создали копию объекта age: {}
    }
})

c1[0].age = 33;





//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// Мы не можем спред оператором делать глубокое копирование массивов. Технически такой возможности нет т
let state4 = {
    name: 'it-kamasutra',
    age: 1,
    school: {
        students: [
            {name: 'Olga', age: 22},
            {name: 'Slava', age: 24},
            {name: 'Dima', age: 22}
        ],
        address: 'Saint-Petersburg',
        director: {
        name: 'Andrey Victorovich'
    }
}
}

let copyState4 = {...state4,
    school: {
    ...state4.school,
        students: state4.school.students.map(el=>({...el})),
        director: {...state4.school.director},
        }
}
